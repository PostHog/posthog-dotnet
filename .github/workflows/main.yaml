name: Build PostHog .NET SDK

on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  PackageDirectory: ${{ github.workspace }}/build/packages/Release
  DOTNET_VERSION: 9.0.101

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3.0.3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore NuGet Packages
        run: dotnet restore
        shell: bash

      # This not only builds the solution, but also creates the NuGet packages
      - name: Build
        run: dotnet build --configuration Release --no-restore --nologo
        shell: bash

      # Retrieve the release tag, if this is a tag push
      - if: startsWith(github.ref, 'refs/tags/')
        name: Get release tag
        id: get_tag
        run: echo "RELEASE_TAG=${{ github.ref }}" >> $GITHUB_ENV

      # Upload the packages so the release.yaml workflow can pick them up, if this is a tag push
      - if: startsWith(github.ref, 'refs/tags/') # Only upload packages for tags
        name: Upload NuGet Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-${{ env.RELEASE_TAG }}
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.PackageDirectory }}/*.nupkg

      - name: Run Tests
        run: dotnet test --logger "trx;LogFileName=test-results.trx" --configuration Release --no-build --nologo
        shell: bash

      - name: Collect Test Results
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: dorny/test-reporter@v1
        with:
          name: "xUnit Tests"
          path: "tests/*/TestResults/test-results.trx"
          reporter: 'dotnet-trx'

      - name: Upload Test Snapshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: verify-test-results
          retention-days: 7
          path: |
            **/*.received.*

  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore NuGet Packages
        run: dotnet restore
        shell: bash

      - name: Set up dotnet-format problem matcher
        run: echo "::add-matcher::$GITHUB_WORKSPACE/.github/problemMatchers/dotnet-format.json"
        shell: bash

      - name: Format!
        run: bin/fmt --check
        shell: bash
