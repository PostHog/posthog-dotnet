@page
@using PostHog
@model IndexModel
@inject IPostHogClient PostHog
@{
    ViewData["Title"] = "Home page";
}

@if (!string.IsNullOrEmpty(Model.StatusMessage)) {
    <div class="alert alert-success mt-3" role="alert">
        @Model.StatusMessage
    </div>
}

<validation-summary></validation-summary>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <p class="lead">
            This is a sample web application that demonstrates using the
            PostHog .NET SDK.
        </p>
        @if (Model.UserId is null) {
            <p class="text-danger">You are not logged in.</p>
        }
        else {
            <p class="text-success">You are logged in with id <code>@Model.UserId</code>.</p>
        }
    </div>
    <div>
        @if (!Model.ProjectApiKeyIsSet) {
            <div class="alert alert-warning mt-3" role="alert">
                The project API key is not set.
                You can use the following command to set the key in the root of
                this project:
                <br />
                <code>script/user-secrets set PostHog:ProjectApiKey your-api-key</code>
            </div>
        }
        else {
            <div class="alert alert-info mt-3" role="alert">
                <strong>
                    The Project API Key <code>@Model.PostHogOptions.ProjectApiKey</code> is set pointing to
                    <code>@Model.PostHogOptions.HostUrl!</code>
                    <br />We're ready to go!
                </strong>
            </div>

            if (Model.PersonalApiKeyIsSet) {
                <div class="alert alert-info mt-3" role="alert">
                    <strong>
                        The Personal API Key is set. If it's valid, we'll be using local evaluation.
                    </strong>
                </div>
            }
            else {
                <div class="alert alert-info mt-3" role="alert">
                    <strong>
                        The Personal API Key is NOT set. We'll be using remote evaluation.
                    </strong>
                </div>
            }

            <form method="get">
                <div class="form-group mb-2">
                    <label asp-for="ProjectSize">Override Project Size (for evaluating feature flags). <code>default: Large</code></label>
                    <input asp-for="FeatureFlagKey" class="form-control" type="hidden"/>
                    <input asp-for="ProjectSize" class="form-control" placeholder="Enter project size"/>
                </div>

                <button type="submit" class="btn btn-primary mb-2">Override Project Size</button>
            </form>

            @if (Model.UserId is not null) {
                <div class="px-3">
                    <h2 class="mt-5">Feature Flag Checker</h2>
                    <form method="get">
                        <div class="form-group mb-2">
                            <label asp-for="FeatureFlagKey">Feature Flag Key</label>
                            <input asp-for="ProjectSize" type="hidden" class="form-control" />
                            <input asp-for="FeatureFlagKey" class="form-control" placeholder="Feature Flag Key"/>
                        </div>

                        <button type="submit" class="btn btn-primary mb-2">Check Feature Flag</button>
                    </form>
                    @if (Model.FeatureFlagKey is { } key) {
                        if (await PostHog.IsFeatureEnabledAsync(key, Model.UserId)) {
                            <div class="alert alert-success" role="alert">
                                The feature flag <code>@Model.FeatureFlagKey</code> is enabled.
                            </div>
                        }
                        else {
                            <div class="alert alert-danger" role="alert">
                                The feature flag <code>@Model.FeatureFlagKey</code> is disabled.
                            </div>
                        }
                    }
                </div>
            }

            <div class="d-flex justify-content-between px-3">
                <div>
                    <h2 class="mt-5">PostHog Client Configuration</h2>

                    <table class="table table-auto mt-3">
                        <thead class="thead-dark">
                        <tr>
                            <th>Option</th>
                            <th>Value</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td><code>HostUrl</code></td>
                            <td>@Model.PostHogOptions.HostUrl</td>
                        </tr>
                        <tr>
                            <td data-tippy-content="When events are sent to PostHog, they are sent in batches via the <code>/batch</code> endpoint. This option specifies the maximum number of events to send in a single batch.">
                                <code>MaxBatchSize ℹ️</code>
                            </td>
                            <td>@Model.PostHogOptions.MaxBatchSize</td>
                        </tr>
                        <tr>
                            <td data-tippy-content="The number of events to capture before sending to PostHog">
                                <code>FlushAt ℹ</code>
                            </td>
                            <td>@Model.PostHogOptions.FlushAt events</td>
                        </tr>
                        <tr>
                            <td data-tippy-content="The interval between periodic flushes">
                                <code>FlushInterval ℹ</code>
                            </td>
                            <td>@Model.PostHogOptions.FlushInterval.TotalSeconds seconds</td>
                        </tr>
                        </tbody>
                    </table>
                </div>
                <div class="ml-3">
                    <h2 class="mt-5">Feature Flags</h2>
                    <table class="table table-auto table-striped mt-3">
                        <thead class="thead-dark">
                    <tr>
                        <th>Feature</th>
                        <th>Result</th>
                        <th>Enabled</th>
                    </tr>
                    </thead>
                        <tbody>
                        @foreach (var flag in Model.FeatureFlags) {
                            var (flagValue, isEnabled) = flag.Value;
                            <tr>
                                <td>@flag.Key</td>
                                <td><code>@isEnabled</code></td>
                                <td><code>@flagValue</code></td>
                            </tr>
                        }
                            <tr>
                                <td>non-existent-flag</td>
                                <td><code><em>@(Model.NonExistentFlag?.ToString() ?? "undefined")</em></code></td>
                                <td><code><em>@(Model.NonExistentFlag?.ToString() ?? "null")</em></code></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="mt-3">
                <div class="row justify-content-center">
                    <pre class="bg-gray-200 p-4"><code>&lt;feature name="simple-flag">
    &lt;code>simple-flag&lt;/code> is enabled.
&lt;/feature></code></pre>
                    <pre><code>&lt;feature name="simple-flag" negate="true">
    &lt;code>simple-flag&lt;/code> is not enabled.
&lt;/feature></code></pre>
                    <div class="bg-info">
                        <feature name="simple-flag">
                            <code>simple-flag</code> is enabled.
                        </feature>
                        <feature name="simple-flag" negate="true">
                            <code>simple-flag</code> is not enabled.
                        </feature>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <div class="row justify-content-center">
                    <pre class="bg-gray-200 p-4"><code>&lt;feature name="project-feature">
    &lt;code>project-feature&lt;/code> is enabled (Group property "is_demo" is true).
&lt;/feature></code></pre>
                    <pre><code>&lt;feature name="project-feature" negate="true">
    &lt;code>project-feature&lt;/code> is not enabled (Group property "is_demo" is not true).
&lt;/feature></code></pre>
                    <div class="bg-info">
                        <feature name="project-feature">
                            <code>project-feature</code> is enabled (Group property "is_demo" is true).
                        </feature>
                        <feature name="project-feature" negate="true">
                            <code>project-feature</code> is not enabled (Group property "is_demo" is not true).
                        </feature>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <div class="row justify-content-center">
                    <pre class="bg-gray-200 p-4"><code>
&lt;feature name="multivariate-feature" variant="first-variant-key">
    &lt;code>multivariate-feature&lt;/code> is enabled for variant &lt;code>first-variant-key&lt;/code>.
&lt;/feature>
&lt;feature name="multivariate-feature" variant="second-variant-key">
    &lt;code>multivariate-feature&lt;/code> is enabled for variant &lt;code>second-variant-key&lt;/code>.
&lt;/feature>
&lt;feature name="multivariate-feature" variant="third-variant-key">
    &lt;code>multivariate-feature&lt;/code> is enabled for variant &lt;code>third-variant-key&lt;/code>.
&lt;/feature>
&lt;feature name="multivariate-feature" variant="fourth-variant-key">
    &lt;code>multivariate-feature&lt;/code> is enabled for variant &lt;code>fourth-variant-key&lt;/code>.
&lt;/feature>
&lt;feature name="multivariate-feature" negate="true">
    &lt;code>multivariate-feature&lt;/code> is not enabled.
&lt;/feature>
</code></pre>
                    <div class="bg-info">
                        <feature name="multivariate-feature" variant="first-variant-key" requirement="Any">
                            <code>multivariate-feature</code> is enabled for variant <code>first-variant-key</code>.
                        </feature>
                        <feature name="multivariate-feature" variant="second-variant-key" requirement="Any">
                            <code>multivariate-feature</code> is enabled for variant <code>second-variant-key</code>.
                        </feature>
                        <feature name="multivariate-feature" variant="third-variant-key" requirement="Any">
                            <code>multivariate-feature</code> is enabled for variant <code>third-variant-key</code>.
                        </feature>
                        <feature name="multivariate-feature" variant="fourth-variant-key" requirement="Any">
                            <code>multivariate-feature</code> is enabled for variant <code>fourth-variant-key</code>.
                        </feature>
                        <feature name="multivariate-feature" negate="true">
                            <code>multivariate-feature</code> is not enabled.
                        </feature>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <form method="post">
                            <p>Click this button to capture an event:</p>
                            <div class="form-group mb-2">
                                <label asp-for="EventName">Event Name</label>
                                <input asp-for="EventName" class="form-control" placeholder="Enter event name"/>
                            </div>
                            @if (Model.UserId is null) {
                                <div class="form-group mb-2">
                                    <label asp-for="FakeUserId">User Id</label>
                                    <input asp-for="FakeUserId" class="form-control" placeholder="Enter a user id"/>
                                    <p class="text-muted small">
                                        Because you are not logged in, we don't know your user id. For the sake of
                                        testing, you can just make one up! It can be anything that makes sense to you.
                                    </p>
                                </div>
                            }

                            <button type="submit" class="btn btn-primary mb-2">Send Event</button>
                        </form>
                        <p class="text-muted small">
                            This sample app will automatically flush events every
                            @Model.PostHogOptions.FlushInterval.TotalSeconds seconds or
                            when every @Model.PostHogOptions.FlushAt event is captured.
                        </p>
                    </div>
                    <div class="col-md-6">
                        <form method="post" asp-page-handler="IdentifyGroup">
                            <p>Click this button to identify a group:</p>
                            <div class="form-group mb-2">
                                <label asp-for="Group.Type">Group Type</label>
                                <input asp-for="Group.Type" class="form-control" placeholder="Enter group type"/>
                            </div>
                            <div class="form-group mb-2">
                                <label asp-for="Group.Key">Group Key</label>
                                <input asp-for="Group.Key" class="form-control" placeholder="Enter group key"/>
                            </div>

                            <div class="form-group mb-2">
                                <label asp-for="Group.Name">Group Name</label>
                                <input asp-for="Group.Name" class="form-control" placeholder="Enter group name"/>
                            </div>

                            <button type="submit" class="btn btn-primary mb-2">Identify Group</button>
                        </form>
                        <p class="text-muted small">
                            This sample app will automatically flush events every
                            @Model.PostHogOptions.FlushInterval.TotalSeconds seconds or
                            when every @Model.PostHogOptions.FlushAt event is captured.
                        </p>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <pre><code>
await posthog.GetRemoteConfigPayloadAsync(
    "unencrypted-remote-config-setting");

> @Model.UnencryptedRemoteConfigSetting
</code></pre>
                    </div>
                    <div class="col-md-6">
                        <pre><code>
await posthog.GetRemoteConfigPayloadAsync(
    "encrypted-remote-config-setting");

@Model.EncryptedRemoteConfigSetting
</code></pre>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
